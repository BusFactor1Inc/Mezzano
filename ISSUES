Stop the world GC
  - how could it be made incremental, concurrent?
  - every allocation holds a mutex. no per-thread nurseries
  - local files are stored in dynamic space and copied on every gc
  - when is a gc triggered?  can it be triggered less until an
    incremental gc has been written?
  - Generational garbage collection overviews: 
      http://c2.com/cgi/wiki?GenerationalGarbageCollection
      http://home.pipeline.com/~hbaker1/YoungGen.html
      http://www.memorymanagement.org/
  - to begin, create a single nursery for the general area
    - current general area could be for old objects, which is allocated into when not enough space in the nursery
    - need to experiment to see what the appropriate nursery size is (try 32M to start)
    - this area will be mark and sweep gc, see how it's done for pinned areas in gc.lisp
    - follow the guidelines in the c2 wiki page
  - make trimming of cons and general areas optional during gc-cycle

Compiler:
  - slow and uses a lot of memory so it gc's a lot
  - does it save file/line number information? if not, make it so
  - only single floats supported

Self hosting
  - test to see which system modules can't be compiled by the mz compiler

Real local file system (vfat?)

Editor:
   - More emacs keybindings: C-o, C-m, C-j, M-C-x
   - compile-buffer, eval-buffer, compile-file (C-ck), eval-expression (M-:), eval-last-sexp (C-xe)
   - basic search for string, search for regex (can MZ compile cl-PPCRE?)
   - incremental search
   - no paren matching
   - no auto indentation (basic electric newline?)
   
  - create *Messages* buffer, create function #'message, replace calls to (format t ...) with calls 
    to #'message, insert text into *Messages* in #'messages
    - would like to create a stream type that will write to a buffer (buffer-stream?), that way format
      could still be used and one would not have to use a #'message function
      -  https://github.com/sbcl/sbcl/blob/master/doc/manual/gray-streams-examples.texinfo
      
  - create a proper minibuffer area for displaying messages and getting input
    - curently the title contains some of what would be in a mode-line

   - bigger features
     - undo
     - color highlighting (hard, might want to just use italic/bold for keywords at first)
     - file completion during C-x C-f
     - symbol completion during M-: 
     - jump/pop to/from source M-./M-* (see compiler for adding line/file information)
     - 'hippy' symbol completion M-/

   - Encoding BUG: saving gui/compositor.c caused some sort of encoding problem with
     the pound symbol and another one. had to revert using git. also happens on 
     copywrite symbol in the README.
     
     
Threads:
  - no way to kill running threads from the outside

REPL:
  - Lack of C-c/abort
  - Sometimes a closing #\) evaluates, sometimes not
  - Lack of tab completion for symbols

When loading an .llf file, the redefinition of each class is asked for.  It
would be nice to have them all be redefined at once like in CCL.

GUI:
   - can't move windows by clicking in the title bar.
   - can't resize windows with the mouse
   - no way to switch windows with the keyboard (Alt-Tab?)
   - tiling window manager (port stump?)

Using 'when' casues allocation? Tried to write code using 'when' in gc-cycle in this caused a panic due to 
allocation during gc.

HPET timer driver.

