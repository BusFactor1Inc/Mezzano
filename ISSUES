Editor issues moved to http://github.com/burtonsamograd/me

GUI:
   - can't move windows by clicking in the title bar.
   - can't resize windows with the mouse
   - hitting the Windows MENU key in telnet causes hang
   - no way to switch windows with the keyboard (Alt-Tab?)
(defun activate-next-window ()
  (flet ((next-in-list (e l)
   "Give the next entry after e in the list l, wrapping around."
   (let ((pos (position e l)))
     (if (= pos (1- (length l)))
 (car l)
 (nth (1+ pos) l)))))
  (let ((next (next-in-list *active-window* *window-list*)))
    (activate-window next))))
   - tiling window manager (port stump?)

Snapshots:

  - most embedded systems have (at least) 2 images so that one will
    always be bootable.  often, doing a snapshot in MZ will fail with
    OOM.  a solution would be to divide the disk into 2 areas and have
    a marker for which one to boot.  only until after the snapshot has
    completed successfully is the marker updated to point to the new
    image. mabye also update the bootloader to allow for the selection
    of world images to boot from.
     
Stop the world GC:
  - how could it be made incremental, concurrent?
  - every allocation holds a mutex. no per-thread nurseries
  - local files are stored in dynamic space and copied on every gc
  - when is a gc triggered?  can it be triggered less until an
    incremental gc has been written?
  - Generational garbage collection overviews: 
      http://c2.com/cgi/wiki?GenerationalGarbageCollection
      http://home.pipeline.com/~hbaker1/YoungGen.html
      http://www.memorymanagement.org/
  - to begin, create a single nursery for the general area
    - current general area could be for old objects, which is allocated into when not enough space in the nursery
    - need to experiment to see what the appropriate nursery size is (try 32M to start)
    - this area will be mark and sweep gc, see how it's done for pinned areas in gc.lisp
    - follow the guidelines in the c2 wiki page
  - make trimming of cons and general areas optional during gc-cycle

Closette:
  - defgeneric macro doesn't handle (declare ...) properly
    - a hack might would be to &allow-other-keys in
      make-instance-standard-generic-function, but then the
      decleration would be ignored
    - a proper fix(?) would be to fix defgeneric to see if the first
      'option' is a decleration, and if so, put that first in the
      progn before the call to ensure-generic-function
    - more proper would be to ensure other calls also do this,
      defmethod, defclass?

Compiler:
  - load-time-value is not implemented
13:37 <Bicyclidine> well, basically if COMPILE runs into
                    load-time-value it evaluates the form right
                    then (at compile time)
13:37 <Bicyclidine> and if COMPILE-FILE runs into it, it makes a
                    note in the fasl to evaluate this form at load
                    time, and for the value to show up wherever the
                    load-time-value call was
  - optimize pass1.lisp:find-function,find-variable
  - slow and uses a lot of memory so it gc's a lot
  - does it save file/line number information? if not, make it so
  - only single floats supported

Self hosting
  - test to see which system modules can't be compiled by the mz compiler

Real local file system (vfat?)

Threads:
  - no way to kill running threads from the outside

REPL:
  - Lack of C-c/abort
  - Sometimes a closing #\) evaluates, sometimes not
  - Lack of tab completion for symbols

When loading an .llf file, the redefinition of each class is asked for.  It
would be nice to have them all be redefined at once like in CCL.

Using 'when' casues allocation? Tried to write code using 'when' in gc-cycle in this caused a panic due to 
allocation during gc.

HPET timer driver. Requires ACPI support to find base address of the HPET.

Virtualbox extensions video driver (resizable main windows?)
  http://f.osdev.org/viewtopic.php?f=1&t=28766&start=0
  http://wiki.osdev.org/Bochs_Graphics_Adaptor <- interesting

- (decode-universal-time) and other time functions